# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Importer
                                 A QGIS plugin
 Importer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-08-08
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Importer
        email                : Importer
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QFont
from qgis.PyQt.QtWidgets import QAction, QApplication, QDialog
from qgis.core import Qgis, QgsProject, QgsVectorLayer
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Importer_dialog import ImporterDialog

import json
import requests
import os
import sys
import subprocess
import importlib

class Importer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir,'i18n','Importer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SIMILE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        if sys.platform.startswith('win'):
            self.tmpCSV = os.path.join(os.environ['TMP'], "out.csv")
        else:
            self.tmpCSV = os.path.join("/tmp", "out.csv")
            
        if sys.platform != "win32":
            self.pythonCmd = sys.executable
        else:                
            for path in sys.path:
                file = os.path.join(path, "python.exe")
                if os.path.isfile(file):
                    self.pythonCmd = file


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Importer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Importer/icon.png'
        self.add_action(icon_path, text=self.tr(u'SIMILE Importer'), callback=self.run, parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&SIMILE Importer'),action)
            self.iface.removeToolBarIcon(action)

    def startPlugin(self):
        try:
            pandasLib = importlib.import_module('pandas')
        except Exception as e:                      
            try:
                self.dlg.pushButton.setText("WAIT...")
                QApplication.processEvents();
                subprocess.check_call([self.pythonCmd, "-m", "pip", "install", "pandas"])             
            except Exception as e:    
                iface.messageBar().pushCritical("SIMILE IMPORTER", str(e))
                self.dlg.pushButton.setText("IMPORT")
                self.dlg.close()
                return

        try:
            pandasLib = importlib.import_module('pandas')
            dataframe = pandasLib.DataFrame()
            self.dlg.pushButton.setText("LOADING...")
            QApplication.processEvents();
            data = json.loads(requests.get("http://api-simile.como.polimi.it/v1/observations").content.decode('utf-8'))

            for d in data['data']:
                dataframe = pandasLib.concat([dataframe,pandasLib.json_normalize(d)], ignore_index=True)
                                 
            dataframe.replace({'position.roi':'000000000000000000000001'}, 'Italy - Lombardy Region - Lake Como', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000002'}, 'Italy - Piedmont Region - Lake Maggiore', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000003'}, 'Italy -Lombardy Region - Lake Maggiore', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000004'}, 'Switzerland - Canton of Ticino - Lake Maggiore', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000005'}, 'Switzerland - Canton of Ticino - Lake Lugano', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000006'}, 'Italy - Lombardy Region - Lake Lugano', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000007'}, 'Italy - Lombardy Region - Lake Lugano', inplace=True)
            dataframe.replace({'position.roi':'000000000000000000000008'}, 'Italy - Lombardy Region - Lake Lugano', inplace=True)                 
            dataframe[['longitude','latitude']] = pandasLib.DataFrame(dataframe['position.coordinates'].tolist(), index=dataframe.index)

            dataframe.to_csv(self.tmpCSV, index=False)
            layer = QgsVectorLayer('file:///' + self.tmpCSV + '?crs=epsg:4326&delimiter=%s&xField=%s&yField=%s' % (",", "longitude", "latitude"), 'data', 'delimitedtext')
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer)  
                iface.messageBar().pushMessage("SIMILE IMPORTER", "IMPORT COMPLETED", Qgis.Info, 3)
                
        except Exception as e:
            iface.messageBar().pushCritical("SIMILE IMPORTER", str(e))
            
        self.dlg.pushButton.setText("IMPORT")
        self.dlg.close()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ImporterDialog()
            self.dlg.pushButton.clicked.connect(self.startPlugin)
            
        self.dlg.show()
